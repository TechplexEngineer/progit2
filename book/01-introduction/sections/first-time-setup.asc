[[_first_time]]
=== Använda Git för första gången

Nu när du har Git på ditt system, så ska du göra en del saker för att skräddarsy din Git-miljö.
Du behöver endast göra detta en gång på de datorer du använder; de kommer att bevaras vid uppdateringar.
Du kan också ändra dem när som helst, genom att köra samma kommandon igen.

Git kommer med ett verktyg som kallas `git config` som låter dig visa och definiera konfigurationsvariabler som hanterar alla aspekter av hur Git ser ut och hur det utför saker och ting.(((git commands, config)))
Dessa variabler kan lagras på tre olika ställen:

1. Filen `/etc/gitconfig`: Innehåller värden som tillämpas för varje användare på systemet i fråga, och alla repositorys.
  Om du ger flaggan `--system` till `git config`, läses och skrivs det till denna filen specifikt.
  (Eftersom detta är en systemkonfigurationsfil, behöver du administrativa behörigheter eller vara superuser för att ändra den.)
2. Filen `~/.gitconfig` eller `~/.config/git/config`: Värden specifika för dig, användaren.
  Du klan få Git att läsa och skriva specifikt till denna filen genom att ge flaggan `--global` och detta påverkar _alla_ repositorys som du arbetar med på ditt system.
3. Filen `config` i Gitkatalogen (dvs. `.git/config`) i vilket repository du för närvarande står i: Specifikt för detta enstaka repository.
  Du kan tvinga Git att läsa och skriva specifikt till denna fil med flaggan `--local`, men detta är standard.
  (Föga överraskande behöver du vara någonstans i ett Gitrepository för att denna flagga skall fungera korrekt.)
  
Varje nivå åsidosätter värden i föregående nivå, så värden i `.git/config` trumfar de i `/etc/gitconfig`.

På Windowssystem kollar Git efter `.gitconfig` i `$HOME`-katalogen (`C:\Users\$USER` för de flesta).
Den letarn fortfarande efter `/etc/gitconfig`, men det är relativt roten MSys, vilket är var du väljer att installera Git på ditt Windowssystem när du kör installationsprogrammet.
Om du använder version 2.x eller senare av Git för windows, finns det även en systemnivåkonfigurationsfil belägen på `C:\Documents and Settings\All Users\Application Data\Git\config` för Windows XP och på `C:\ProgramData\Git\config` i Windows Vista och senare.
Denna konfigurationsfil kan bara ändras genom `git config -f <fil>` som administratör.

==== Din identitet

Det första du skall göra när du installerar Git är att sätta ditt användarnamn och en e-postadress.
Detta är viktigt eftersom varje Gitcommit använder denna information och den är oföränderligt inbakad i de commiter du skapar:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Återigen, du behöver bara göra detta en gång om du ger flaggan `--global`, eftersom Git alltid kommer att använda den informationen för allt du gör på det systemet.
Om du vill åsidosätta detta med ett annat namn eller en e-postadress för specifika projekt, kan du köra kommandot utan flaggan `--global` när du står i det projektet.

Många av de grafiska verktygen kommer att hjälpa dig med detta första gången du kör dem.

==== Din editor

Nu när din identitet är inställd kan du konfigurarera vilken textredigerare Git skall använda som standard när du skall skriva in ett meddelande.
Om du inte gör det, kommer Git att använda systemets standardredigerare.

Om du vill använda en annan textredigerare, t.ex. Emacs, kan du göra följande:

[source,console]
----
$ git config --global core.editor emacs
----

På ett Windowssystem måste du specificera den fullständiga sökvägen till den körbara filen för att använda en annan textredigerare.
Detta kan vara olika beroende på hur din editor är packeterad.

För Notepad++, en populär textredigerare i programmeringssammanhang, är det troligt att du vill använda 32-bitarsversionen, då 64-bitarsversionen i skrivande stund inte har stöd för alla plugin.
Om du är på ett 32-bitarssystem eller har en 64-bitars textredigerare på ett 64-bitarssystem skriver du något i stil med:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----

Om du har en 32-bitars textredigerare på ett 64-bitarssystem kommer programmen installeras i `C:\Program Files (x86)`:

[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[NOTE]
====
Vim, Emacs och Notepad++ är populära textredigerare som ofta används av utvecklare på Unixbaserade system som Linux och macOS eller ett Windowssystem.
Är du inte bekant med dessa textredigerare kan du behöva söka efter specifika instruktioner för hur du ställer in din favorittextredigerare med Git.
====

[WARNING]
====
Om du inte ställer in din textredigeraren på dessa sätt kan du hamna i ett förvirrande läge när Git försöker starta textredigeraren.
Ett exempel i ett Windowssystem kan inkludera en i förtid avslutad Gitoperation under en Gitinitierad redigering.
====

==== Kontrollera dina inställningar

Om du vill kontrollera dina konfigurationsinställningar kan du använda kommandot `git config --list` för att lista alla inställningar Git kan hitta för närvarande:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Du kan se nycklar mer än än gång, eftersom Git läser nycklarna från olika filer (`/etc/gitconfig` och `~/.gitconfig`, till exampel).
I dessa fallen använder Git det senaste värdet för varje unik nyckel den ser.

Du kan också kontrollera vad Git tycker att en specifik nyckels värdä är genom att skriva `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Eftersom Git kan läsa samma konfigurationsvariabel från mer än en fil ä'r det möjligt att du kan få ett oväntat värde för en av dessa värden utan att du vet varför.
Vid sådana tillfällen kan du fråga Git varifrån värdet _härstammar_ och Git talar då om vilken konfigurationsfil som hade det sista ordet när det gällde att sätta värdet:
====

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
